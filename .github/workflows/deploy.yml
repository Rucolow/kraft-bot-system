name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Deployment with proper user privilege management
          
          # Navigate to kraftbot project directory
          cd /home/kraftbot/kraft-bot-system
          
          # Pull latest changes as kraftbot user
          sudo -u kraftbot git pull origin main
          
          # Generate secure .env file with proper ownership
          sudo -u kraftbot rm -f .env
          sudo -u kraftbot echo "# Discord Bot Tokens" > .env
          sudo -u kraftbot echo "DISCORD_TOKEN_CENTRAL_BANK_BOT=${{ secrets.DISCORD_TOKEN_CENTRAL_BANK_BOT }}" >> .env
          sudo -u kraftbot echo "DISCORD_TOKEN_COMMUNITY_BOT=${{ secrets.DISCORD_TOKEN_COMMUNITY_BOT }}" >> .env
          sudo -u kraftbot echo "DISCORD_TOKEN_TITLE_BOT=${{ secrets.DISCORD_TOKEN_TITLE_BOT }}" >> .env
          sudo -u kraftbot echo "DISCORD_TOKEN_STOCK_MARKET_BOT=${{ secrets.DISCORD_TOKEN_STOCK_MARKET_BOT }}" >> .env
          sudo -u kraftbot echo "" >> .env
          sudo -u kraftbot echo "# Anthropic API" >> .env
          sudo -u kraftbot echo "ANTHROPIC_API_KEY=${{ secrets.CLAUDE_API_KEY }}" >> .env
          sudo -u kraftbot echo "" >> .env
          sudo -u kraftbot echo "# Firebase" >> .env
          sudo -u kraftbot echo "FIREBASE_PROJECT_ID=new-kraft-bot" >> .env
          sudo -u kraftbot echo "" >> .env
          sudo -u kraftbot echo "# Admin Configuration" >> .env
          sudo -u kraftbot echo "ADMIN_USER_IDS=${{ secrets.ADMIN_USER_IDS }}" >> .env
          
          # Set secure permissions
          sudo chmod 600 .env
          sudo chown kraftbot:kraftbot .env
          
          # Update dependencies in virtual environment
          sudo -u kraftbot bash -c "
            source kraft_env/bin/activate
            pip install -r requirements.txt --quiet
          "
          
          # Validate environment before restart
          echo "=== Pre-deployment Validation ==="
          sudo -u kraftbot python3 -c "
          import os
          from dotenv import load_dotenv
          load_dotenv()
          tokens = ['DISCORD_TOKEN_CENTRAL_BANK_BOT', 'DISCORD_TOKEN_COMMUNITY_BOT', 'DISCORD_TOKEN_TITLE_BOT', 'DISCORD_TOKEN_STOCK_MARKET_BOT']
          for token in tokens:
              value = os.getenv(token)
              print(f'{token}: {\"✅ Set\" if value else \"❌ Missing\"}')
          "
          
          # Restart services with dependency order
          echo "=== Service Restart Sequence ==="
          services=(kraft-central-bank kraft-community kraft-title kraft-stock-market)
          
          for service in "${services[@]}"; do
            if systemctl is-enabled "$service" >/dev/null 2>&1; then
              echo "Restarting $service..."
              sudo systemctl restart "$service"
              sleep 2
              
              # Verify service startup
              if systemctl is-active --quiet "$service"; then
                echo "✅ $service: Active"
              else
                echo "❌ $service: Failed"
                sudo journalctl -u "$service" --no-pager -n 10
              fi
            else
              echo "⚠️  $service: Not enabled"
            fi
          done
          
          # Post-deployment verification
          echo "=== Post-deployment Status ==="
          sudo systemctl status kraft-* --no-pager -l
          
          echo "=== Deployment Summary ==="
          echo "Timestamp: $(date)"
          echo "Git commit: $(cd /home/kraftbot/kraft-bot-system && git rev-parse --short HEAD)"
          echo "Services restarted: ${#services[@]}"
    
    - name: Send Discord notification
      if: always()
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        ack_no_webhook: true
        status: ${{ job.status }}
        title: "Deployment Status"
        description: |
          Deployment to VPS ${{ job.status }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}